//
// Product.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public enum ProductType: String, CaseIterable {
    case manga
    case anime
    
    static func from(str: String?) -> ProductType {
        if let tStr = str?.lowercased(), tStr == ProductType.manga.rawValue {
            return .manga
        } else {
            return .anime
        }
    }
}

public struct Product: Codable, Identifiable, Hashable {
    
    static var naught: Product {
        Product(malId: 0,
                imageUrl: "",
                title: "",
                synopsis: "",
                type: "",
                members: 0,
                score: 0)
    }
    
    public var id: Int {
        malId
    }
    
    public var imgURL: URL? {
        URL(string: imageUrl)
    }
    
    public var typeProd: ProductType {
        ProductType.from(str: type)
    }
    
    public var malId: Int = 0
    public var imageUrl: String = ""
    public var title: String = ""
    public var synopsis: String = ""
    private var type: String = ""
    public var members: Int = 0
    public var score: Double = 0

    public init(malId: Int, imageUrl: String, title: String, synopsis: String, type: String, members: Int, score: Double) {
        self.malId = malId
        self.imageUrl = imageUrl
        self.title = title
        self.synopsis = synopsis
        self.type = type
        self.members = members
        self.score = score
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case malId = "mal_id"
        case imageUrl = "image_url"
        case title
        case synopsis
        case type
        case members
        case score
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(malId, forKey: .malId)
        try container.encode(imageUrl, forKey: .imageUrl)
        try container.encode(title, forKey: .title)
        try container.encode(synopsis, forKey: .synopsis)
        try container.encode(type, forKey: .type)
        try container.encode(members, forKey: .members)
        try container.encode(score, forKey: .score)
    }
}
